import com.andresestevez.soreh.buildsrc.Libs

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'

}

android {
    namespace 'com.andresestevez.soreh'
    compileSdk 33

    defaultConfig {
        applicationId "com.andresestevez.soreh"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"
        // Please ensure you have a valid API KEY for https://superheroapi.com to use this app
        // Put the key in gradle.properties
        buildConfigField("String", "API_KEY", API_KEY)

        testInstrumentationRunner "com.andresestevez.soreh.di.HiltTestRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }
    
    buildFeatures {
        buildConfig = true
    }

    signingConfigs {
        release {
            storeFile file('E:\\dev\\proyectosAndroid\\Soreh recursos\\keystore\\key_soreh.jks')
            storePassword 'hoechst-1'
            keyAlias 'key0'
            keyPassword 'Soreh-0'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        benchmark {
            initWith release
            matchingFallbacks = ['release']
            debuggable false
            proguardFiles("benchmark-rules.pro")
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain {
            languageVersion.set(JavaLanguageVersion.of("17"))
        }
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.4.6'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

}

dependencies {

    implementation project(':domain')
    implementation project(':data')

    implementation Libs.AndroidX.coreKtx
    implementation Libs.AndroidX.Compose.uiGraphics
    implementation Libs.AndroidX.Compose.uiToolingPreview
    implementation Libs.AndroidX.Compose.uiViewbinding
    implementation Libs.AndroidX.Compose.materialIconsExtended
    implementation Libs.AndroidX.Compose.runtimeLivedata
    implementation Libs.AndroidX.material3
    implementation Libs.AndroidX.Tv.foundation
    implementation Libs.AndroidX.Tv.material
    implementation Libs.material
    implementation Libs.coilCompose
    implementation Libs.spinkit
    implementation Libs.placeholder
    implementation Libs.splashscreen


    implementation Libs.AndroidX.Lifecycle.livedataKtx
    implementation Libs.AndroidX.Lifecycle.runtimeCompose
    implementation Libs.AndroidX.navigationCompose

    implementation Libs.Retrofit.retrofit
    implementation Libs.Retrofit.converterMoshi

    implementation Libs.Okhttp3.okhttp
    implementation Libs.Okhttp3.loggingInterceptor

    implementation Libs.timber

    implementation Libs.Hilt.android
    testImplementation project(path: ':app')
    kapt Libs.Hilt.compiler
    implementation Libs.AndroidX.hiltNavigationCompose

    implementation Libs.AndroidX.Room.roomRuntime
    kapt Libs.AndroidX.Room.compiler
    implementation Libs.AndroidX.Room.roomKtx

    // workmanager and worker dependency injection with hilt
    implementation Libs.AndroidX.Work.runtimeKtx
    implementation Libs.AndroidX.hiltWork
    kapt Libs.AndroidX.hiltCompiler

    implementation Libs.AndroidX.palette

    implementation Libs.accompanistSystemUiController

    // baseline profile
    runtimeOnly Libs.AndroidX.profileinstaller

    // For local unit tests
    testImplementation project(":testShared")
    testImplementation Libs.Hilt.androidTesting
    kaptTest Libs.Hilt.compiler

    testImplementation Libs.junit
    testImplementation Libs.Kotlin.Coroutines.test
    testImplementation Libs.Mockito.inline
    testImplementation Libs.Mockito.kotlin
    testImplementation Libs.turbine

    // For instrumentation tests
    androidTestImplementation Libs.AndroidX.Test.junit
    androidTestImplementation Libs.AndroidX.Test.Compose.junit4
    androidTestImplementation Libs.AndroidX.Test.rules
    androidTestImplementation Libs.AndroidX.Test.runner
    androidTestImplementation Libs.AndroidX.Test.espresso
    androidTestImplementation Libs.Hilt.androidTesting
    androidTestImplementation Libs.Kotlin.Coroutines.test
    androidTestImplementation Libs.Okhttp3.mockWebServer
    androidTestImplementation Libs.AndroidX.Work.testing
    androidTestImplementation Libs.AndroidX.coreTesting
    
    // to avoid error in CacheWorkerTest: "Cannot access class 'com.google.common.util.concurrent.ListenableFuture'.
    // Check your module classpath for missing or conflicting dependencies"
    androidTestImplementation Libs.guava

    testImplementation Libs.AndroidX.Work.testing

    kaptAndroidTest Libs.Hilt.compiler

    debugImplementation Libs.AndroidX.Test.Compose.tooling
    debugImplementation Libs.AndroidX.Test.Compose.manifest
    debugImplementation Libs.leakcanary
}


kapt {
    correctErrorTypes true
}